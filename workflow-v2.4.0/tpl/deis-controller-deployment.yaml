#helm:generate helm template -o $HELM_GENERATE_DIR/manifests/deis-controller-deployment.yaml -d $HELM_GENERATE_DIR/tpl/generate_params.toml $HELM_GENERATE_DIR/tpl/deis-controller-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: deis-controller
  namespace: deis
  labels:
    heritage: deis
  annotations:
    helm-keep: "true"
    component.deis.io/version: {{env "CONTROLLER_GIT_TAG" | default .controller.dockerTag}}
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app: deis-controller
  template:
    metadata:
      labels:
        app: deis-controller
    spec:
      serviceAccount: deis-controller
      containers:
        - name: deis-controller
          image: quay.io/{{.controller.org}}/controller:{{env "CONTROLLER_GIT_TAG" | default .controller.dockerTag}}
          imagePullPolicy: {{.controller.pullPolicy}}
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /readiness
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 5
          ports:
            - containerPort: 8000
              name: http
{{- if or (.controller.limits_cpu) (.controller.limits_memory)}}
          resources:
            limits:
{{- if (.controller.limits_cpu) }}
              cpu: {{.controller.limits_cpu}}
{{- end}}
{{- if (.controller.limits_memory) }}
              memory: {{.controller.limits_memory}}
{{- end}}
{{- end}}
          env:
            # NOTE(bacongobbler): use deis/registry-proxy to work around Docker --insecure-registry requirements
            - name: "DEIS_REGISTRY_SERVICE_HOST"
              value: "localhost"
            - name: "DEIS_REGISTRY_SERVICE_PORT"
              value: "{{.registry_proxy.hostPort}}"
            - name: "APP_STORAGE"
              value: "{{ or (env "STORAGE_TYPE") (.storage)}}"
            - name: "DEIS_REGISTRY_LOCATION"
              value: "{{ or (env "REGISTRY_LOCATION") (.registry_location) }}"
            - name: "DEIS_REGISTRY_SECRET_PREFIX"
              value: "{{ .registry_token_refresher.secretPrefix }}"
            - name: "SLUGRUNNER_IMAGE_NAME"
              value: "quay.io/{{.slugrunner.org}}/slugrunner:{{env "SLUGRUNNER_GIT_TAG" | default .slugrunner.dockerTag}}"
            - name: DEIS_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: django-secret-key
                  key: secret-key
            - name: DEIS_BUILDER_KEY
              valueFrom:
                secretKeyRef:
                  name: builder-key-auth
                  key: builder-key
{{- if env "DATABASE_LOCATION" | default .database_location | eq "off-cluster" }}
            - name: DEIS_DATABASE_NAME
              value: "{{ env "DATABASE_NAME" | default .database.name }}"
            - name: DEIS_DATABASE_SERVICE_HOST
              value: "{{ env "DATABASE_HOST" | default .database.host }}"
            - name: DEIS_DATABASE_SERVICE_PORT
              value: "{{ env "DATABASE_PORT" | default .database.port }}"
{{- end }}
            - name: DEIS_DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: database-creds
                  key: user
            - name: DEIS_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-creds
                  key: password
            - name: RESERVED_NAMES
              value: "deis, deis-builder, deis-workflow-manager, grafana"
          volumeMounts:
            - mountPath: /var/run/docker.sock
              name: docker-socket
            - name: builder-key-auth
              mountPath: /var/run/secrets/api/builder/auth
              readOnly: true
            - name: django-secret-key
              mountPath: /var/run/secrets/api/django
              readOnly: true
            - name: database-creds
              mountPath: /var/run/secrets/deis/database/creds
              readOnly: true
      volumes:
        - name: docker-socket
          hostPath:
            path: /var/run/docker.sock
        - name: django-secret-key
          secret:
            secretName: django-secret-key
        - name: builder-key-auth
          secret:
            secretName: builder-key-auth
        - name: database-creds
          secret:
            secretName: database-creds
